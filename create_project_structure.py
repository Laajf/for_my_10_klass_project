import os
import glob


def get_project_structure(root_dir):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã
    ignore_dirs = {'__pycache__', '.git', '.idea', 'venv', 'env', 'node_modules'}
    ignore_files = {'.DS_Store', '.gitignore', '*.pyc'}

    output_lines = []

    def should_include(path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É –≤ –≤—ã–≤–æ–¥"""
        name = os.path.basename(path)
        if name in ignore_dirs:
            return False
        if any(name.endswith(ext) for ext in ['.pyc', '.tmp']):
            return False
        return True

    def add_file_content(file_path, relative_path):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –≤—ã–≤–æ–¥"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            output_lines.append(f"\n{'=' * 80}\n")
            output_lines.append(f"–§–ê–ô–õ: {relative_path}\n")
            output_lines.append(f"{'=' * 80}\n")
            output_lines.append(content)
            output_lines.append(f"\n{'=' * 80}\n")

        except UnicodeDecodeError:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã
            output_lines.append(f"\n{'=' * 80}\n")
            output_lines.append(f"–§–ê–ô–õ: {relative_path} (–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)\n")
            output_lines.append(f"{'=' * 80}\n")
        except Exception as e:
            output_lines.append(f"\n{'=' * 80}\n")
            output_lines.append(f"–§–ê–ô–õ: {relative_path} (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)})\n")
            output_lines.append(f"{'=' * 80}\n")

    def traverse_directory(current_dir, prefix=""):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            items = sorted(os.listdir(current_dir))

            for item in items:
                full_path = os.path.join(current_dir, item)
                relative_path = os.path.relpath(full_path, root_dir)

                if not should_include(full_path):
                    continue

                if os.path.isdir(full_path):
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ
                    output_lines.append(f"{prefix}üìÅ {item}/\n")
                    traverse_directory(full_path, prefix + "    ")
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    output_lines.append(f"{prefix}üìÑ {item}\n")
                    add_file_content(full_path, relative_path)

        except PermissionError:
            output_lines.append(f"{prefix}‚ùå [–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ]\n")
        except Exception as e:
            output_lines.append(f"{prefix}‚ùå [–û—à–∏–±–∫–∞: {str(e)}]\n")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    output_lines.append("–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê: SMART PLANNER\n")
    output_lines.append(f"–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {root_dir}\n")
    output_lines.append("=" * 80 + "\n")

    # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ö–æ–¥ —Å –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    traverse_directory(root_dir)

    return "".join(output_lines)


def save_project_structure():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–∞–π–ª"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    current_dir = os.path.dirname(os.path.abspath(__file__))

    # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    output_file = os.path.join(current_dir, "project_structure.txt")

    print(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    print(f"–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
    print(f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    structure = get_project_structure(current_dir)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(structure)

    print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {output_file}")
    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(structure)} —Å–∏–º–≤–æ–ª–æ–≤")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    lines = structure.split('\n')
    file_count = structure.count('–§–ê–ô–õ:')
    dir_count = structure.count('üìÅ')

    print(f"üìÅ –ü–∞–ø–æ–∫: {dir_count}")
    print(f"üìÑ –§–∞–π–ª–æ–≤: {file_count}")
    print(f"üìù –°—Ç—Ä–æ–∫: {len(lines)}")


if __name__ == "__main__":
    save_project_structure()