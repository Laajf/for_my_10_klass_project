–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê: SMART PLANNER
–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: /Users/admin/Desktop/for_my_10_klass_project
================================================================================
üìÑ .DS_Store

================================================================================
–§–ê–ô–õ: .DS_Store (–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
================================================================================
üìÅ assets/
    üìÑ .DS_Store

================================================================================
–§–ê–ô–õ: assets/.DS_Store (–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
================================================================================
    üìÅ fonts/
    üìÅ icons/
üìÅ core/
    üìÑ .DS_Store

================================================================================
–§–ê–ô–õ: core/.DS_Store (–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
================================================================================
    üìÑ __init__.py

================================================================================
–§–ê–ô–õ: core/__init__.py
================================================================================

================================================================================
    üìÑ exceptions.py

================================================================================
–§–ê–ô–õ: core/exceptions.py
================================================================================
class TaskNotFoundException(Exception):
    pass

class InvalidTaskDataException(Exception):
    pass
================================================================================
    üìÑ models.py

================================================================================
–§–ê–ô–õ: core/models.py
================================================================================
from enum import Enum
from datetime import datetime
from dataclasses import dataclass
from typing import Optional


class Priority(Enum):
    LOW = "–ù–∏–∑–∫–∏–π"
    MEDIUM = "–°—Ä–µ–¥–Ω–∏–π"
    HIGH = "–í—ã—Å–æ–∫–∏–π"


class TaskStatus(Enum):
    PENDING = "–û–∂–∏–¥–∞–µ—Ç"
    IN_PROGRESS = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
    COMPLETED = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"
    CANCELLED = "–û—Ç–º–µ–Ω–µ–Ω–∞"


@dataclass
class Task:
    id: str
    title: str
    description: str
    priority: Priority
    status: TaskStatus
    due_date: datetime
    created_date: datetime
    completed_date: Optional[datetime] = None
    reminder_time: Optional[datetime] = None

    def __post_init__(self):
        if isinstance(self.priority, str):
            self.priority = Priority(self.priority)
        if isinstance(self.status, str):
            self.status = TaskStatus(self.status)


@dataclass
class Reminder:
    id: str
    task_id: str
    reminder_time: datetime
    is_sent: bool = False


@dataclass
class DailyStatistics:
    date: datetime
    total_tasks: int
    completed_tasks: int
    productivity_percent: float

    @property
    def completion_rate(self) -> float:
        if self.total_tasks == 0:
            return 0.0
        return (self.completed_tasks / self.total_tasks) * 100
================================================================================
üìÑ create_project_structure.py

================================================================================
–§–ê–ô–õ: create_project_structure.py
================================================================================
import os
import glob


def get_project_structure(root_dir):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã
    ignore_dirs = {'__pycache__', '.git', '.idea', 'venv', 'env', 'node_modules'}
    ignore_files = {'.DS_Store', '.gitignore', '*.pyc'}

    output_lines = []

    def should_include(path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É –≤ –≤—ã–≤–æ–¥"""
        name = os.path.basename(path)
        if name in ignore_dirs:
            return False
        if any(name.endswith(ext) for ext in ['.pyc', '.tmp']):
            return False
        return True

    def add_file_content(file_path, relative_path):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –≤—ã–≤–æ–¥"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            output_lines.append(f"\n{'=' * 80}\n")
            output_lines.append(f"–§–ê–ô–õ: {relative_path}\n")
            output_lines.append(f"{'=' * 80}\n")
            output_lines.append(content)
            output_lines.append(f"\n{'=' * 80}\n")

        except UnicodeDecodeError:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã
            output_lines.append(f"\n{'=' * 80}\n")
            output_lines.append(f"–§–ê–ô–õ: {relative_path} (–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)\n")
            output_lines.append(f"{'=' * 80}\n")
        except Exception as e:
            output_lines.append(f"\n{'=' * 80}\n")
            output_lines.append(f"–§–ê–ô–õ: {relative_path} (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)})\n")
            output_lines.append(f"{'=' * 80}\n")

    def traverse_directory(current_dir, prefix=""):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            items = sorted(os.listdir(current_dir))

            for item in items:
                full_path = os.path.join(current_dir, item)
                relative_path = os.path.relpath(full_path, root_dir)

                if not should_include(full_path):
                    continue

                if os.path.isdir(full_path):
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ
                    output_lines.append(f"{prefix}üìÅ {item}/\n")
                    traverse_directory(full_path, prefix + "    ")
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    output_lines.append(f"{prefix}üìÑ {item}\n")
                    add_file_content(full_path, relative_path)

        except PermissionError:
            output_lines.append(f"{prefix}‚ùå [–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ]\n")
        except Exception as e:
            output_lines.append(f"{prefix}‚ùå [–û—à–∏–±–∫–∞: {str(e)}]\n")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    output_lines.append("–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê: SMART PLANNER\n")
    output_lines.append(f"–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {root_dir}\n")
    output_lines.append("=" * 80 + "\n")

    # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ö–æ–¥ —Å –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    traverse_directory(root_dir)

    return "".join(output_lines)


def save_project_structure():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–∞–π–ª"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    current_dir = os.path.dirname(os.path.abspath(__file__))

    # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    output_file = os.path.join(current_dir, "project_structure.txt")

    print(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    print(f"–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
    print(f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    structure = get_project_structure(current_dir)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(structure)

    print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {output_file}")
    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(structure)} —Å–∏–º–≤–æ–ª–æ–≤")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    lines = structure.split('\n')
    file_count = structure.count('–§–ê–ô–õ:')
    dir_count = structure.count('üìÅ')

    print(f"üìÅ –ü–∞–ø–æ–∫: {dir_count}")
    print(f"üìÑ –§–∞–π–ª–æ–≤: {file_count}")
    print(f"üìù –°—Ç—Ä–æ–∫: {len(lines)}")


if __name__ == "__main__":
    save_project_structure()
================================================================================
üìÑ main.py

================================================================================
–§–ê–ô–õ: main.py
================================================================================
from kivy.app import App
from kivy.uix.screenmanager import ScreenManager


class SmartPlannerApp(App):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.task_service = None
        self.selected_task_id = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è

    def build(self):
        from ui.screens.main_screen import MainScreen
        from ui.screens.task_editor import TaskEditorScreen
        from ui.screens.calendar_view import CalendarScreen
        from ui.screens.statistics_screen import StatisticsScreen

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        from services.task_service import TaskService
        self.task_service = TaskService()

        # –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ —ç–∫—Ä–∞–Ω—ã
        sm = ScreenManager()
        sm.add_widget(MainScreen(name='main', task_service=self.task_service))
        sm.add_widget(TaskEditorScreen(name='task_editor', task_service=self.task_service))
        sm.add_widget(CalendarScreen(name='calendar', task_service=self.task_service))
        sm.add_widget(StatisticsScreen(name='statistics', task_service=self.task_service))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —ç–∫—Ä–∞–Ω–æ–≤
        self.sm = sm
        return sm


if __name__ == '__main__':
    SmartPlannerApp().run()
================================================================================
üìÅ repository/
    üìÑ .DS_Store

================================================================================
–§–ê–ô–õ: repository/.DS_Store (–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
================================================================================
    üìÑ __init__.py

================================================================================
–§–ê–ô–õ: repository/__init__.py
================================================================================

================================================================================
    üìÑ reminder_repository.py

================================================================================
–§–ê–ô–õ: repository/reminder_repository.py
================================================================================

================================================================================
    üìÑ statistics_repository.py

================================================================================
–§–ê–ô–õ: repository/statistics_repository.py
================================================================================

================================================================================
    üìÑ task_repository.py

================================================================================
–§–ê–ô–õ: repository/task_repository.py
================================================================================
import json
import os
from typing import List, Optional
from datetime import datetime
from core.models import Task, TaskStatus, Priority
from core.exceptions import TaskNotFoundException
from utils.config import ensure_data_dir, TASKS_FILE


class TaskRepository:
    def __init__(self, storage_file=TASKS_FILE):
        ensure_data_dir()
        self.storage_file = storage_file
        self._ensure_storage_exists()

    def _ensure_storage_exists(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not os.path.exists(self.storage_file):
            with open(self.storage_file, 'w', encoding='utf-8') as f:
                json.dump([], f)

    def _load_tasks(self) -> List[dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(self.storage_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            return []

    def _save_tasks(self, tasks_data: List[dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ JSON —Ñ–∞–π–ª"""
        with open(self.storage_file, 'w', encoding='utf-8') as f:
            json.dump(tasks_data, f, indent=2, default=str, ensure_ascii=False)

    def _task_to_dict(self, task: Task) -> dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Task –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': task.id,
            'title': task.title,
            'description': task.description,
            'priority': task.priority.value,
            'status': task.status.value,
            'due_date': task.due_date.isoformat(),
            'created_date': task.created_date.isoformat(),
            'completed_date': task.completed_date.isoformat() if task.completed_date else None,
            'reminder_time': task.reminder_time.isoformat() if task.reminder_time else None
        }

    def _dict_to_task(self, data: dict) -> Task:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ Task"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from core.models import Task, Priority, TaskStatus

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã
        due_date = datetime.fromisoformat(data['due_date'])
        created_date = datetime.fromisoformat(data['created_date'])
        completed_date = datetime.fromisoformat(data['completed_date']) if data['completed_date'] else None
        reminder_time = datetime.fromisoformat(data['reminder_time']) if data['reminder_time'] else None

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Priority –∏ TaskStatus –∏–∑ —Å—Ç—Ä–æ–∫
        priority = Priority(data['priority'])
        status = TaskStatus(data['status'])

        return Task(
            id=data['id'],
            title=data['title'],
            description=data['description'],
            priority=priority,
            status=status,
            due_date=due_date,
            created_date=created_date,
            completed_date=completed_date,
            reminder_time=reminder_time
        )

    def add_task(self, task: Task):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        tasks_data = self._load_tasks()
        tasks_data.append(self._task_to_dict(task))
        self._save_tasks(tasks_data)

    def get_task(self, task_id: str) -> Optional[Task]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID"""
        tasks_data = self._load_tasks()
        for task_data in tasks_data:
            if task_data['id'] == task_id:
                return self._dict_to_task(task_data)
        return None

    def get_all_tasks(self) -> List[Task]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏"""
        tasks_data = self._load_tasks()
        return [self._dict_to_task(task_data) for task_data in tasks_data]

    def update_task(self, task: Task):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É"""
        tasks_data = self._load_tasks()
        task_found = False

        for i, task_data in enumerate(tasks_data):
            if task_data['id'] == task.id:
                tasks_data[i] = self._task_to_dict(task)
                task_found = True
                break

        if not task_found:
            raise TaskNotFoundException(f"Task with id {task.id} not found")

        self._save_tasks(tasks_data)

    def delete_task(self, task_id: str):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID"""
        tasks_data = self._load_tasks()
        initial_length = len(tasks_data)
        tasks_data = [task for task in tasks_data if task['id'] != task_id]

        if len(tasks_data) == initial_length:
            raise TaskNotFoundException(f"Task with id {task_id} not found")

        self._save_tasks(tasks_data)

    def get_tasks_by_date(self, date: datetime) -> List[Task]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É"""
        all_tasks = self.get_all_tasks()
        target_date = date.date()
        return [task for task in all_tasks if task.due_date.date() == target_date]

    def get_completed_tasks(self) -> List[Task]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        all_tasks = self.get_all_tasks()
        return [task for task in all_tasks if task.status == TaskStatus.COMPLETED]

    def get_pending_tasks(self) -> List[Task]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        all_tasks = self.get_all_tasks()
        return [task for task in all_tasks if task.status != TaskStatus.COMPLETED]

    def get_tasks_by_priority(self, priority: Priority) -> List[Task]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        all_tasks = self.get_all_tasks()
        return [task for task in all_tasks if task.priority == priority]
================================================================================
üìÅ services/
    üìÑ .DS_Store

================================================================================
–§–ê–ô–õ: services/.DS_Store (–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
================================================================================
    üìÑ __init__.py

================================================================================
–§–ê–ô–õ: services/__init__.py
================================================================================

================================================================================
    üìÑ analytics_service.py

================================================================================
–§–ê–ô–õ: services/analytics_service.py
================================================================================

================================================================================
    üìÑ notification_service.py

================================================================================
–§–ê–ô–õ: services/notification_service.py
================================================================================
from datetime import datetime
from core.models import Task
from plyer import notification
import threading
import time


class NotificationService:
    def __init__(self):
        self.scheduled_reminders = {}

    def schedule_reminder(self, task: Task):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        if not task.reminder_time:
            return

        reminder_id = f"task_{task.id}"

        # –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        self.cancel_reminder(task.id)

        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        now = datetime.now()
        delay = (task.reminder_time - now).total_seconds()

        if delay > 0:
            timer = threading.Timer(delay, self._show_notification, [task])
            timer.start()
            self.scheduled_reminders[task.id] = timer

    def _show_notification(self, task: Task):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            notification.notify(
                title=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task.title}",
                message=f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task.due_date.strftime('%H:%M')}",
                timeout=10
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def cancel_reminder(self, task_id: str):
        """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        if task_id in self.scheduled_reminders:
            self.scheduled_reminders[task_id].cancel()
            del self.scheduled_reminders[task_id]
================================================================================
    üìÑ reminder_service.py

================================================================================
–§–ê–ô–õ: services/reminder_service.py
================================================================================

================================================================================
    üìÑ task_service.py

================================================================================
–§–ê–ô–õ: services/task_service.py
================================================================================
import uuid
from datetime import datetime
from typing import List, Optional
from core.models import Task, TaskStatus, Priority
from repository.task_repository import TaskRepository
from services.notification_service import NotificationService
from core.exceptions import InvalidTaskDataException


class TaskService:
    def __init__(self):
        self.task_repository = TaskRepository()
        self.notification_service = NotificationService()
        print("TaskService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def create_task(self, title: str, description: str, priority: Priority, due_date: datetime,
                    reminder_time: Optional[datetime] = None) -> Task:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {title}, –¥–∞—Ç–∞: {due_date}")

        if not title or not title.strip():
            raise InvalidTaskDataException("Title cannot be empty")

        task = Task(
            id=str(uuid.uuid4()),
            title=title.strip(),
            description=description.strip(),
            priority=priority,
            status=TaskStatus.PENDING,
            due_date=due_date,
            created_date=datetime.now(),
            reminder_time=reminder_time
        )

        self.task_repository.add_task(task)
        print(f"–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {task.title}")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if reminder_time:
            self.notification_service.schedule_reminder(task)

        return task

    def get_all_tasks(self) -> List[Task]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏"""
        tasks = self.task_repository.get_all_tasks()
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {len(tasks)}")
        return tasks

    def get_today_tasks(self) -> List[Task]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now().date()
        all_tasks = self.get_all_tasks()
        today_tasks = [task for task in all_tasks if
                       task.due_date.date() == today and task.status != TaskStatus.COMPLETED]
        print(f"–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(today_tasks)}")
        for task in today_tasks:
            print(f"  - {task.title} (–¥–∞—Ç–∞: {task.due_date})")
        return today_tasks

    def complete_task(self, task_id: str):
        """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        task = self.task_repository.get_task(task_id)
        if task:
            task.status = TaskStatus.COMPLETED
            task.completed_date = datetime.now()
            self.task_repository.update_task(task)

            # –û—Ç–º–µ–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
            self.notification_service.cancel_reminder(task_id)
            print(f"–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task.title}")

    def update_task(self, task_id: str, **kwargs):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É"""
        task = self.task_repository.get_task(task_id)
        if task:
            for key, value in kwargs.items():
                if hasattr(task, key):
                    setattr(task, key, value)
            self.task_repository.update_task(task)

    def delete_task(self, task_id: str):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É"""
        self.notification_service.cancel_reminder(task_id)
        self.task_repository.delete_task(task_id)

    def get_tasks_by_date(self, date: datetime) -> List[Task]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É"""
        tasks = self.task_repository.get_tasks_by_date(date)
        print(f"–ó–∞–¥–∞—á–∏ –Ω–∞ {date.date()}: {len(tasks)}")
        for task in tasks:
            print(f"  - {task.title}")
        return tasks
================================================================================
üìÑ tasks.json

================================================================================
–§–ê–ô–õ: tasks.json
================================================================================
[]
================================================================================
üìÅ ui/
    üìÑ .DS_Store

================================================================================
–§–ê–ô–õ: ui/.DS_Store (–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
================================================================================
    üìÑ __init__.py

================================================================================
–§–ê–ô–õ: ui/__init__.py
================================================================================

================================================================================
    üìÅ kv/
        üìÑ calendar_view.kv

================================================================================
–§–ê–ô–õ: ui/kv/calendar_view.kv
================================================================================
<CalendarScreen>:
    name: "calendar"
    calendar_grid: calendar_grid

    canvas.before:
        Color:
            rgba: 0.98, 0.98, 0.98, 1
        Rectangle:
            pos: self.pos
            size: self.size

    BoxLayout:
        orientation: "vertical"
        padding: [dp(15), dp(15)]
        spacing: dp(10)

        # ---------- –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å ----------
        BoxLayout:
            size_hint_y: None
            height: dp(50)
            spacing: dp(10)

            Label:
                text: "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"
                font_size: "24sp"
                bold: True
                color: 0.1, 0.15, 0.25, 1
                halign: "left"
                valign: "middle"
                text_size: self.size

            BoxLayout:
                size_hint_x: 0.7
                spacing: dp(5)

                Button:
                    text: "–°–µ–≥–æ–¥–Ω—è"
                    font_size: "12sp"
                    background_color: 0.2, 0.6, 1, 1
                    background_normal: ""
                    color: 1, 1, 1, 1
                    on_press: root._go_to_today()
                    canvas.before:
                        Color:
                            rgba: 0.2, 0.6, 1, 1
                        RoundedRectangle:
                            pos: self.pos
                            size: self.size
                            radius: [dp(8)]

                Button:
                    text: "<"
                    font_size: "14sp"
                    background_color: 0.95, 0.95, 0.95, 1
                    background_normal: ""
                    color: 0.3, 0.3, 0.3, 1
                    on_press: root._prev_month()
                    canvas.before:
                        Color:
                            rgba: 0.95, 0.95, 0.95, 1
                        RoundedRectangle:
                            pos: self.pos
                            size: self.size
                            radius: [dp(8)]

                Button:
                    text: ">"
                    font_size: "14sp"
                    background_color: 0.95, 0.95, 0.95, 1
                    background_normal: ""
                    color: 0.3, 0.3, 0.3, 1
                    on_press: root._next_month()
                    canvas.before:
                        Color:
                            rgba: 0.95, 0.95, 0.95, 1
                        RoundedRectangle:
                            pos: self.pos
                            size: self.size
                            radius: [dp(8)]

                Button:
                    text: "–ù–∞–∑–∞–¥"
                    font_size: "12sp"
                    background_color: 0.2, 0.6, 1, 1
                    background_normal: ""
                    color: 1, 1, 1, 1
                    on_press: root._go_to_main()
                    canvas.before:
                        Color:
                            rgba: 0.2, 0.6, 1, 1
                        RoundedRectangle:
                            pos: self.pos
                            size: self.size
                            radius: [dp(8)]

        # ---------- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞ ----------
        BoxLayout:
            size_hint_y: None
            height: dp(30)
            padding: [0, dp(5)]

            Label:
                text: "{} {}".format(root.current_month, root.current_year)
                font_size: "18sp"
                bold: True
                color: 0.1, 0.15, 0.25, 1
                halign: "center"
                valign: "middle"
                text_size: self.size

        # ---------- –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ ----------
        GridLayout:
            cols: 7
            size_hint_y: None
            height: dp(25)
            spacing: dp(2)

            Label:
                text: "–ü–ù"
                font_size: "12sp"
                bold: True
                color: 0.4, 0.4, 0.4, 1
                text_size: self.size
                halign: "center"
                valign: "middle"
            Label:
                text: "–í–¢"
                font_size: "12sp"
                bold: True
                color: 0.4, 0.4, 0.4, 1
                text_size: self.size
                halign: "center"
                valign: "middle"
            Label:
                text: "–°–†"
                font_size: "12sp"
                bold: True
                color: 0.4, 0.4, 0.4, 1
                text_size: self.size
                halign: "center"
                valign: "middle"
            Label:
                text: "–ß–¢"
                font_size: "12sp"
                bold: True
                color: 0.4, 0.4, 0.4, 1
                text_size: self.size
                halign: "center"
                valign: "middle"
            Label:
                text: "–ü–¢"
                font_size: "12sp"
                bold: True
                color: 0.4, 0.4, 0.4, 1
                text_size: self.size
                halign: "center"
                valign: "middle"
            Label:
                text: "–°–ë"
                font_size: "12sp"
                bold: True
                color: 0.8, 0.2, 0.2, 1
                text_size: self.size
                halign: "center"
                valign: "middle"
            Label:
                text: "–í–°"
                font_size: "12sp"
                bold: True
                color: 0.8, 0.2, 0.2, 1
                text_size: self.size
                halign: "center"
                valign: "middle"

        # ---------- –°–µ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è ----------
        GridLayout:
            id: calendar_grid
            cols: 7
            spacing: dp(2)
            size_hint_y: 1.0

        # ---------- –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è ----------
        BoxLayout:
            size_hint_y: None
            height: dp(1)
            canvas.before:
                Color:
                    rgba: 0.8, 0.8, 0.8, 1
                Rectangle:
                    pos: self.pos
                    size: self.size

        # ---------- –ü–∞–Ω–µ–ª—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è ----------
        BoxLayout:
            orientation: "vertical"
            size_hint_y: None
            height: dp(120)
            padding: [dp(15), dp(10)]
            canvas.before:
                Color:
                    rgba: 1, 1, 1, 1
                RoundedRectangle:
                    pos: self.pos
                    size: self.size
                    radius: [dp(10)]
                Color:
                    rgba: 0.9, 0.9, 0.9, 1
                Line:
                    rounded_rectangle: [self.x, self.y, self.width, self.height, dp(10)]
                    width: 1

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
            Label:
                text: "{} {}".format(root.selected_day, root.current_month) if root.selected_day > 0 else "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å"
                font_size: "16sp"
                bold: True
                size_hint_y: 0.3
                color: 0.1, 0.15, 0.25, 1
                text_size: self.size
                halign: "left"
                valign: "middle"

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            ScrollView:
                size_hint_y: 0.7
                do_scroll_x: False
                bar_color: 0.2, 0.6, 1, 0.7
                bar_width: dp(4)
                bar_inactive_color: 0.2, 0.6, 1, 0.3

                Label:
                    text: root.selected_day_info_text
                    font_size: "14sp"
                    color: 0.4, 0.4, 0.4, 1
                    text_size: self.width, None
                    size_hint_y: None
                    height: self.texture_size[1]
                    halign: "left"
                    valign: "top"
                    markup: True
================================================================================
        üìÅ components/
            üìÑ task_item.kv

================================================================================
–§–ê–ô–õ: ui/kv/components/task_item.kv
================================================================================

================================================================================
        üìÑ main.kv

================================================================================
–§–ê–ô–õ: ui/kv/main.kv
================================================================================

================================================================================
        üìÑ main_screen.kv

================================================================================
–§–ê–ô–õ: ui/kv/main_screen.kv
================================================================================
<MainScreen>:
    name: "main"
    tasks_container: tasks_container

    canvas.before:
        Color:
            rgba: 0.98, 0.98, 0.98, 1
        Rectangle:
            pos: self.pos
            size: self.size

    BoxLayout:
        orientation: "vertical"
        padding: [dp(20), dp(20)]
        spacing: dp(24)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        BoxLayout:
            size_hint_y: None
            height: dp(48)
            spacing: dp(16)

            Label:
                text: "–°–µ–≥–æ–¥–Ω—è"
                font_size: "32sp"
                bold: True
                color: 0.1, 0.1, 0.1, 1
                halign: "left"
                valign: "middle"
                text_size: self.size

            Widget:

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        BoxLayout:
            size_hint_y: None
            height: dp(48)
            spacing: dp(12)

            Button:
                text: "+ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"
                font_size: "15sp"
                bold: True
                background_color: 0.2, 0.6, 1, 1
                background_normal: ""
                color: 1, 1, 1, 1
                on_press: root._go_to_task_editor()
                canvas.before:
                    Color:
                        rgba: 0.2, 0.6, 1, 1
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(24)]

            Button:
                text: "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"
                font_size: "15sp"
                background_color: 0.95, 0.95, 0.95, 1
                background_normal: ""
                color: 0.3, 0.3, 0.3, 1
                on_press: root._go_to_calendar()
                canvas.before:
                    Color:
                        rgba: 0.95, 0.95, 0.95, 1
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(24)]

            Button:
                text: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
                font_size: "15sp"
                background_color: 0.95, 0.95, 0.95, 1
                background_normal: ""
                color: 0.3, 0.3, 0.3, 1
                on_press: root._go_to_statistics()
                canvas.before:
                    Color:
                        rgba: 0.95, 0.95, 0.95, 1
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(24)]

        # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        ScrollView:
            do_scroll_x: False
            bar_color: 0.2, 0.6, 1, 0.6
            bar_width: dp(4)
            bar_inactive_color: 0.2, 0.6, 1, 0.3
            scroll_type: ['bars', 'content']
            effect_cls: "ScrollEffect"

            BoxLayout:
                id: tasks_container
                orientation: "vertical"
                size_hint_y: None
                spacing: 0
                padding: [dp(4), dp(8), dp(4), dp(20)]
                height: self.minimum_height
================================================================================
        üìÑ statistics_screen.kv

================================================================================
–§–ê–ô–õ: ui/kv/statistics_screen.kv
================================================================================
<StatisticsScreen>:
    name: "statistics"

    canvas.before:
        Color:
            rgba: 0.95, 0.97, 1, 1
        Rectangle:
            pos: self.pos
            size: self.size

    BoxLayout:
        orientation: "vertical"
        padding: [30, 25]
        spacing: 20

        # ---------- –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å ----------
        BoxLayout:
            size_hint_y: 0.12
            spacing: 15

            Label:
                text: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
                font_size: "30sp"
                bold: True
                color: 0.1, 0.15, 0.25, 1
                halign: "left"
                valign: "middle"
                text_size: self.size

            Button:
                text: "–ù–∞–∑–∞–¥"
                size_hint_x: 0.3
                background_color: 0.15, 0.3, 0.6, 1
                background_normal: ""
                color: 1, 1, 1, 1
                font_size: "16sp"
                bold: True
                on_press: root._go_to_main()
                canvas.before:
                    Color:
                        rgba: 0.15, 0.3, 0.6, 1
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [14]

        # ---------- –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ----------
        GridLayout:
            cols: 2
            spacing: 15
            size_hint_y: 0.25

            # –ö–∞—Ä—Ç–æ—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            BoxLayout:
                orientation: "vertical"
                padding: [20, 15]
                canvas.before:
                    Color:
                        rgba: 1, 1, 1, 1
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [16]
                    Color:
                        rgba: 0.8, 0.85, 0.9, 1
                    Line:
                        rounded_rectangle: [self.x, self.y, self.width, self.height, 16]
                        width: 1

                Label:
                    text: "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á"
                    font_size: "16sp"
                    color: 0.35, 0.35, 0.35, 1
                    size_hint_y: 0.4
                    halign: "left"
                    text_size: self.size

                Label:
                    text: str(root.completed_tasks)
                    font_size: "28sp"
                    bold: True
                    color: 0.15, 0.3, 0.6, 1
                    size_hint_y: 0.6
                    halign: "left"
                    text_size: self.size

            # –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            BoxLayout:
                orientation: "vertical"
                padding: [20, 15]
                canvas.before:
                    Color:
                        rgba: 1, 1, 1, 1
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [16]
                    Color:
                        rgba: 0.8, 0.85, 0.9, 1
                    Line:
                        rounded_rectangle: [self.x, self.y, self.width, self.height, 16]
                        width: 1

                Label:
                    text: "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
                    font_size: "16sp"
                    color: 0.35, 0.35, 0.35, 1
                    size_hint_y: 0.4
                    halign: "left"
                    text_size: self.size

                Label:
                    text: "{}%".format(root.productivity_percent)
                    font_size: "28sp"
                    bold: True
                    color: 0.15, 0.3, 0.6, 1
                    size_hint_y: 0.6
                    halign: "left"
                    text_size: self.size

        # ---------- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ----------
        GridLayout:
            cols: 2
            spacing: 15
            size_hint_y: 0.25

            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            BoxLayout:
                orientation: "vertical"
                padding: [20, 15]
                canvas.before:
                    Color:
                        rgba: 1, 1, 1, 1
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [16]
                    Color:
                        rgba: 0.8, 0.85, 0.9, 1
                    Line:
                        rounded_rectangle: [self.x, self.y, self.width, self.height, 16]
                        width: 1

                Label:
                    text: "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è"
                    font_size: "16sp"
                    color: 0.35, 0.35, 0.35, 1
                    size_hint_y: 0.4
                    halign: "left"
                    text_size: self.size

                Label:
                    text: "25 –º–∏–Ω"
                    font_size: "22sp"
                    bold: True
                    color: 0.1, 0.3, 0.2, 1
                    size_hint_y: 0.6
                    halign: "left"
                    text_size: self.size

            # –õ—É—á—à–∏–π –¥–µ–Ω—å
            BoxLayout:
                orientation: "vertical"
                padding: [20, 15]
                canvas.before:
                    Color:
                        rgba: 1, 1, 1, 1
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [16]
                    Color:
                        rgba: 0.8, 0.85, 0.9, 1
                    Line:
                        rounded_rectangle: [self.x, self.y, self.width, self.height, 16]
                        width: 1

                Label:
                    text: "–õ—É—á—à–∏–π –¥–µ–Ω—å"
                    font_size: "16sp"
                    color: 0.35, 0.35, 0.35, 1
                    size_hint_y: 0.4
                    halign: "left"
                    text_size: self.size

                Label:
                    text: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
                    font_size: "22sp"
                    bold: True
                    color: 0.4, 0.25, 0.05, 1
                    size_hint_y: 0.6
                    halign: "left"
                    text_size: self.size

        # ---------- –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è ----------
        BoxLayout:
            size_hint_y: None
            height: 2
            canvas.before:
                Color:
                    rgba: 0, 0, 0, 0.08
                Rectangle:
                    pos: self.pos
                    size: self.size

        # ---------- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞ ----------
        Label:
            text: "–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            font_size: "20sp"
            color: 0.15, 0.15, 0.25, 1
            size_hint_y: 0.08
            bold: True

        # ---------- –û–±–ª–∞—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–∞ ----------
        BoxLayout:
            size_hint_y: 0.3
            padding: [10, 15]
            canvas.before:
                Color:
                    rgba: 1, 1, 1, 1
                RoundedRectangle:
                    pos: self.pos
                    size: self.size
                    radius: [16]
                Color:
                    rgba: 0.8, 0.85, 0.9, 1
                Line:
                    rounded_rectangle: [self.x, self.y, self.width, self.height, 16]
                    width: 1

            Label:
                text: "–ì—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å"
                font_size: "16sp"
                color: 0.5, 0.5, 0.5, 1
                halign: "center"
                valign: "middle"
                text_size: self.size
================================================================================
        üìÑ task_card.kv

================================================================================
–§–ê–ô–õ: ui/kv/task_card.kv
================================================================================
<TaskCard>:
    orientation: 'horizontal'
    size_hint_y: None
    height: dp(80) if root.description else dp(60)
    padding: [dp(16), dp(12)]
    spacing: dp(12)

    canvas.before:
        # –§–æ–Ω –∫–∞—Ä—Ç–æ—á–∫–∏ - —á–∏—Å—Ç—ã–π –±–µ–ª—ã–π
        Color:
            rgba: 1, 1, 1, 1
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [dp(8)]

        # –¢–æ–Ω–∫–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
        Color:
            rgba: 0.9, 0.9, 0.9, 1
        Line:
            rounded_rectangle: [self.x, self.y, self.width, self.height, dp(8)]
            width: 1

    # –ß–µ–∫–±–æ–∫—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    BoxLayout:
        size_hint_x: None
        width: dp(24)
        padding: [0, dp(4), 0, 0]

        Button:
            size_hint: None, None
            size: dp(20), dp(20)
            background_color: 0, 0, 0, 0
            background_normal: ''
            on_press: root.toggle_completion()
            canvas.before:
                # –ö—Ä—É–≥ –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞
                Color:
                    rgba: 0.9, 0.9, 0.9, 1 if not root.is_completed else root.priority_color
                Ellipse:
                    pos: self.pos
                    size: self.size

                # –ì–∞–ª–æ—á–∫–∞
                Color:
                    rgba: 1, 1, 1, 1 if root.is_completed else 0
                Line:
                    points: [self.x + dp(5), self.y + dp(10), self.x + dp(9), self.y + dp(14), self.x + dp(15), self.y + dp(6)]
                    width: dp(2)
                    cap: 'round'
                    joint: 'round'

    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    BoxLayout:
        orientation: 'vertical'
        spacing: dp(4)

        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: 0.6
            spacing: dp(8)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
            Label:
                text: root.title
                font_size: '16sp'
                bold: True
                color: (0.2, 0.2, 0.2, 1) if not root.is_completed else (0.6, 0.6, 0.6, 1)
                halign: 'left'
                valign: 'middle'
                text_size: self.width, None
                shorten: True
                shorten_from: 'right'

            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            Widget:
                size_hint_x: None
                width: dp(4)
                canvas.before:
                    Color:
                        rgba: root.priority_color
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [dp(2)]

        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ)
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: 0.4
            spacing: dp(8)

            # –û–ø–∏—Å–∞–Ω–∏–µ
            Label:
                text: root.description
                font_size: '14sp'
                color: 0.5, 0.5, 0.5, 1
                halign: 'left'
                valign: 'middle'
                text_size: self.width, None
                shorten: True
                shorten_from: 'right'
                opacity: 1 if root.description else 0

            # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            BoxLayout:
                size_hint_x: None
                width: dp(70) if root.time_text != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else dp(50)
                orientation: 'horizontal'
                spacing: dp(4)

                Label:
                    text: root.date_text
                    font_size: '12sp'
                    color: 0.6, 0.6, 0.6, 1
                    halign: 'right'
                    valign: 'middle'
                    text_size: self.width, None
================================================================================
        üìÑ task_editor.kv

================================================================================
–§–ê–ô–õ: ui/kv/task_editor.kv
================================================================================
<TaskEditorScreen>:
    name: "task_editor"
    
    BoxLayout:
        orientation: "vertical"
        padding: [dp(15), dp(15)]
        spacing: 0
        canvas.before:
            Color:
                rgba: 0.95, 0.97, 1, 1
            Rectangle:
                pos: self.pos
                size: self.size

        # –ß–∏—Å—Ç—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –Ω–∞–∑–∞–¥
        BoxLayout:
            size_hint_y: 0.1
            padding: [0, dp(10)]

            Button:
                text: "< –ù–∞–∑–∞–¥"
                font_size: "16sp"
                size_hint_x: 0.3
                background_color: 0, 0, 0, 0
                background_normal: ""
                color: 0.15, 0.3, 0.6, 1
                bold: True
                on_press: root._go_to_main()

            Label:
                text: "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"
                font_size: "18sp"
                bold: True
                color: 0.1, 0.15, 0.25, 1
                text_size: self.size
                halign: "center"
                valign: "middle"

            Widget:
                size_hint_x: 0.3

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        ScrollView:
            do_scroll_x: False
            bar_color: 0.5, 0.5, 0.8, 0.3
            bar_width: 4
            bar_inactive_color: 0.5, 0.5, 0.8, 0.1

            BoxLayout:
                orientation: "vertical"
                size_hint_y: None
                height: self.minimum_height
                spacing: dp(25)
                padding: [dp(10), dp(20)]

                # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                BoxLayout:
                    orientation: "vertical"
                    size_hint_y: None
                    height: dp(80)
                    spacing: dp(8)

                    Label:
                        text: "–ù–ê–ó–í–ê–ù–ò–ï"
                        font_size: "12sp"
                        color: 0.4, 0.4, 0.5, 1
                        size_hint_y: 0.4
                        text_size: self.size
                        halign: "left"
                        valign: "bottom"

                    TextInput:
                        id: task_title
                        hint_text: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏..."
                        size_hint_y: 0.6
                        multiline: False
                        background_color: 1, 1, 1, 1
                        foreground_color: 0.1, 0.1, 0.1, 1
                        padding: [dp(15), dp(10)]
                        font_size: '16sp'
                        cursor_color: 0.15, 0.3, 0.6, 1
                        write_tab: False
                        focus: True
                        canvas.before:
                            Color:
                                rgba: 1, 1, 1, 1
                            RoundedRectangle:
                                pos: self.pos
                                size: self.size
                                radius: [10]
                            Color:
                                rgba: 0.8, 0.85, 0.9, 1
                            Line:
                                rounded_rectangle: [self.x, self.y, self.width, self.height, 10]
                                width: 1

                # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                BoxLayout:
                    orientation: "vertical"
                    size_hint_y: None
                    height: dp(140)
                    spacing: dp(8)

                    Label:
                        text: "–û–ü–ò–°–ê–ù–ò–ï"
                        font_size: "12sp"
                        color: 0.4, 0.4, 0.5, 1
                        size_hint_y: 0.2
                        text_size: self.size
                        halign: "left"
                        valign: "bottom"

                    TextInput:
                        id: task_description
                        hint_text: "–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏..."
                        size_hint_y: 0.8
                        multiline: True
                        background_color: 1, 1, 1, 1
                        foreground_color: 0.1, 0.1, 0.1, 1
                        padding: [dp(15), dp(10)]
                        font_size: '15sp'
                        cursor_color: 0.15, 0.3, 0.6, 1
                        write_tab: False
                        canvas.before:
                            Color:
                                rgba: 1, 1, 1, 1
                            RoundedRectangle:
                                pos: self.pos
                                size: self.size
                                radius: [10]
                            Color:
                                rgba: 0.8, 0.85, 0.9, 1
                            Line:
                                rounded_rectangle: [self.x, self.y, self.width, self.height, 10]
                                width: 1

                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                BoxLayout:
                    orientation: "vertical"
                    size_hint_y: None
                    height: dp(80)
                    spacing: dp(8)

                    Label:
                        text: "–ü–†–ò–û–†–ò–¢–ï–¢"
                        font_size: "12sp"
                        color: 0.4, 0.4, 0.5, 1
                        size_hint_y: 0.3
                        text_size: self.size
                        halign: "left"
                        valign: "bottom"

                    BoxLayout:
                        id: priority_box
                        size_hint_y: 0.7
                        spacing: dp(8)

                        ToggleButton:
                            id: high_priority
                            text: "–í–´–°–û–ö–ò–ô"
                            group: "priority"
                            background_color: 0, 0, 0, 0
                            background_normal: ""
                            color: (1, 1, 1, 1) if self.state == 'down' else (0.3, 0.3, 0.3, 1)
                            font_size: '12sp'
                            bold: True
                            on_state: root.on_priority_change(self)
                            canvas.before:
                                Color:
                                    rgba: 0.8, 0.2, 0.2, 1 if self.state == 'down' else 0.95, 0.96, 0.98, 1
                                RoundedRectangle:
                                    pos: self.pos
                                    size: self.size
                                    radius: [8]

                        ToggleButton:
                            id: medium_priority
                            text: "–°–†–ï–î–ù–ò–ô"
                            group: "priority"
                            background_color: 0, 0, 0, 0
                            background_normal: ""
                            color: (1, 1, 1, 1) if self.state == 'down' else (0.3, 0.3, 0.3, 1)
                            font_size: '12sp'
                            bold: True
                            on_state: root.on_priority_change(self)
                            state: 'down'
                            canvas.before:
                                Color:
                                    rgba: 0.9, 0.6, 0.1, 1 if self.state == 'down' else 0.95, 0.96, 0.98, 1
                                RoundedRectangle:
                                    pos: self.pos
                                    size: self.size
                                    radius: [8]

                        ToggleButton:
                            id: low_priority
                            text: "–ù–ò–ó–ö–ò–ô"
                            group: "priority"
                            background_color: 0, 0, 0, 0
                            background_normal: ""
                            color: (1, 1, 1, 1) if self.state == 'down' else (0.3, 0.3, 0.3, 1)
                            font_size: '12sp'
                            bold: True
                            on_state: root.on_priority_change(self)
                            canvas.before:
                                Color:
                                    rgba: 0.2, 0.6, 0.2, 1 if self.state == 'down' else 0.95, 0.96, 0.98, 1
                                RoundedRectangle:
                                    pos: self.pos
                                    size: self.size
                                    radius: [8]

                # –î–∞—Ç–∞ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                BoxLayout:
                    orientation: "vertical"
                    size_hint_y: None
                    height: dp(80)
                    spacing: dp(8)

                    Label:
                        text: "–î–ê–¢–ê –ò –í–†–ï–ú–Ø"
                        font_size: "12sp"
                        color: 0.4, 0.4, 0.5, 1
                        size_hint_y: 0.3
                        text_size: self.size
                        halign: "left"
                        valign: "bottom"

                    BoxLayout:
                        size_hint_y: 0.7
                        spacing: dp(8)

                        Button:
                            id: date_button
                            text: "–ó–ê–í–¢–†–ê, 12:00"
                            font_size: "12sp"
                            background_color: 0.95, 0.96, 0.98, 1
                            background_normal: ""
                            color: 0.3, 0.3, 0.4, 1
                            bold: True
                            on_press: root._select_date()
                            canvas.before:
                                Color:
                                    rgba: 0.95, 0.96, 0.98, 1
                                RoundedRectangle:
                                    pos: self.pos
                                    size: self.size
                                    radius: [8]

                        Button:
                            id: time_button
                            text: "–í–´–ë–†–ê–¢–¨ –í–†–ï–ú–Ø"
                            font_size: "12sp"
                            background_color: 0.95, 0.96, 0.98, 1
                            background_normal: ""
                            color: 0.3, 0.3, 0.4, 1
                            bold: True
                            on_press: root._select_time()
                            canvas.before:
                                Color:
                                    rgba: 0.95, 0.96, 0.98, 1
                                RoundedRectangle:
                                    pos: self.pos
                                    size: self.size
                                    radius: [8]

                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                BoxLayout:
                    orientation: "vertical"
                    size_hint_y: None
                    height: dp(60)
                    spacing: dp(8)

                    Label:
                        text: "–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï"
                        font_size: "12sp"
                        color: 0.4, 0.4, 0.5, 1
                        size_hint_y: 0.5
                        text_size: self.size
                        halign: "left"
                        valign: "bottom"

                    Button:
                        text: "–£–°–¢–ê–ù–û–í–ò–¢–¨ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ó–ê 30 –ú–ò–ù"
                        font_size: "12sp"
                        background_color: 0.95, 0.96, 0.98, 1
                        background_normal: ""
                        color: 0.3, 0.3, 0.4, 1
                        bold: True
                        on_press: root._set_reminder()
                        canvas.before:
                            Color:
                                rgba: 0.95, 0.96, 0.98, 1
                            RoundedRectangle:
                                pos: self.pos
                                size: self.size
                                radius: [8]

        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
        BoxLayout:
            size_hint_y: 0.12
            spacing: dp(15)
            padding: [dp(10), dp(5)]

            Button:
                text: "–û–¢–ú–ï–ù–ê"
                font_size: "14sp"
                background_color: 0.95, 0.96, 0.98, 1
                background_normal: ""
                color: 0.4, 0.4, 0.5, 1
                bold: True
                on_press: root._go_to_main()
                canvas.before:
                    Color:
                        rgba: 0.95, 0.96, 0.98, 1
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [10]

            Button:
                text: "–°–û–•–†–ê–ù–ò–¢–¨"
                font_size: "14sp"
                bold: True
                background_color: 0.15, 0.3, 0.6, 1
                background_normal: ""
                color: 1, 1, 1, 1
                on_press: root._save_task()
                canvas.before:
                    Color:
                        rgba: 0.15, 0.3, 0.6, 1
                    RoundedRectangle:
                        pos: self.pos
                        size: self.size
                        radius: [10]
================================================================================
    üìÅ screens/
        üìÑ .DS_Store

================================================================================
–§–ê–ô–õ: ui/screens/.DS_Store (–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
================================================================================
        üìÑ __init__.py

================================================================================
–§–ê–ô–õ: ui/screens/__init__.py
================================================================================

================================================================================
        üìÑ calendar_view.py

================================================================================
–§–ê–ô–õ: ui/screens/calendar_view.py
================================================================================
from kivy.uix.screenmanager import Screen
from kivy.lang import Builder
from kivy.properties import StringProperty, ObjectProperty, NumericProperty
from kivy.clock import Clock
from kivy.metrics import dp
from datetime import datetime, timedelta
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º KV-—Ñ–∞–π–ª
kv_path = os.path.join(os.path.dirname(__file__), '..', 'kv', 'calendar_view.kv')
if os.path.exists(kv_path):
    Builder.load_file(kv_path)


class CalendarDayButton:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–Ω–µ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ü–∏—Ñ—Ä"""

    @staticmethod
    def create(day, is_today=False, is_selected=False, is_weekend=False, task_count=0, on_press_callback=None):
        from kivy.uix.button import Button

        # –ë–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
        if is_selected:
            bg_color = (0.2, 0.6, 1, 1)  # –°–∏–Ω–∏–π
            text_color = (1, 1, 1, 1)  # –ë–µ–ª—ã–π
        elif is_today:
            bg_color = (0.9, 0.95, 1, 1)  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
            text_color = (0.2, 0.6, 1, 1)  # –°–∏–Ω–∏–π
        elif is_weekend:
            bg_color = (1, 1, 1, 1)  # –ë–µ–ª—ã–π
            text_color = (0.8, 0.2, 0.2, 1)  # –ö—Ä–∞—Å–Ω—ã–π
        else:
            bg_color = (1, 1, 1, 1)  # –ë–µ–ª—ã–π
            text_color = (0.1, 0.1, 0.1, 1)  # –ß–µ—Ä–Ω—ã–π

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
        button_text = str(day)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –ø–æ—Å–ª–µ —á–∏—Å–ª–∞
        if task_count > 0:
            button_text += "\n‚Ä¢"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        day_button = Button(
            text=button_text,
            size_hint_y=None,
            height=dp(60),
            background_color=bg_color,
            background_normal='',
            color=text_color,
            font_size='18sp',
            bold=True,
            halign='center',
            valign='middle'
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è
        if on_press_callback:
            day_button.bind(on_press=lambda instance: on_press_callback(day))

        return day_button


class CalendarScreen(Screen):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ü–∏—Ñ—Ä"""

    current_month = StringProperty("")
    current_year = StringProperty("")
    calendar_grid = ObjectProperty(None)
    selected_day = NumericProperty(0)
    selected_date = ObjectProperty(None)
    selected_day_info_text = StringProperty("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á")

    def __init__(self, task_service=None, **kwargs):
        super().__init__(**kwargs)
        self.task_service = task_service
        self.current_date = datetime.now()
        self.selected_day = self.current_date.day
        self.selected_date = self.current_date
        self.tasks_for_selected_day = []
        Clock.schedule_once(self._update_calendar, 0.1)

    def on_enter(self, *args):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        self._update_calendar()

    def _go_to_main(self):
        self.manager.current = 'main'

    def _update_calendar(self, dt=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
        if not self.calendar_grid:
            return

        self.calendar_grid.clear_widgets()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
        self.current_month = self._get_month_name(self.current_date.month)
        self.current_year = str(self.current_date.year)

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        first_day = self.current_date.replace(day=1)
        days_in_month = self._get_days_in_month(self.current_date.year, self.current_date.month)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
        first_weekday = first_day.weekday()  # 0-6, –≥–¥–µ 0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        for _ in range(first_weekday):
            from kivy.uix.widget import Widget
            self.calendar_grid.add_widget(Widget(size_hint_y=None, height=dp(60)))

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
        today = datetime.now()
        for day in range(1, days_in_month + 1):
            is_today = (day == today.day and
                        self.current_date.month == today.month and
                        self.current_date.year == today.year)
            is_selected = (day == self.selected_day)
            is_weekend = (first_weekday + day - 1) % 7 >= 5  # –°—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            day_date = self.current_date.replace(day=day)
            day_tasks = []
            if self.task_service:
                try:
                    day_tasks = self.task_service.get_tasks_by_date(day_date)
                except Exception as e:
                    print(f"CalendarScreen: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: {e}")

            day_widget = CalendarDayButton.create(
                day=day,
                is_today=is_today,
                is_selected=is_selected,
                is_weekend=is_weekend,
                task_count=len(day_tasks),
                on_press_callback=self._on_day_selected
            )
            self.calendar_grid.add_widget(day_widget)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–Ω–µ
        self._update_selected_day_info()

    def _update_selected_day_info(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è"""
        if not self.selected_day:
            self.selected_day_info_text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á"
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
        selected_date = self.current_date.replace(day=self.selected_day)
        self.tasks_for_selected_day = []

        if self.task_service:
            try:
                self.tasks_for_selected_day = self.task_service.get_tasks_by_date(selected_date)
            except Exception as e:
                print(f"CalendarScreen: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if self.tasks_for_selected_day:
            task_text = f"–ó–∞–¥–∞—á–∏ –Ω–∞ {self.selected_day} {self.current_month}:\n\n"
            for task in self.tasks_for_selected_day:
                status_icon = "‚úì" if task.status.value == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" else "‚óã"
                priority_color = self._get_priority_color(task.priority.value)
                task_text += f"{status_icon} [color={priority_color}]‚óè[/color] {task.title}\n"
            self.selected_day_info_text = task_text
        else:
            self.selected_day_info_text = f"–ù–∞ {self.selected_day} {self.current_month} –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã"

    def _get_priority_color(self, priority):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤ hex"""
        colors = {
            "–í—ã—Å–æ–∫–∏–π": "ff4444",  # –ö—Ä–∞—Å–Ω—ã–π
            "–°—Ä–µ–¥–Ω–∏–π": "ffaa00",  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            "–ù–∏–∑–∫–∏–π": "44ff44"  # –ó–µ–ª–µ–Ω—ã–π
        }
        return colors.get(priority, "888888")

    def _on_day_selected(self, day):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è."""
        self.selected_day = day
        self.selected_date = self.current_date.replace(day=day)
        self._update_calendar()

    def _get_month_name(self, month_num):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –ø–æ –Ω–æ–º–µ—Ä—É"""
        months = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        return months[month_num - 1] if 1 <= month_num <= 12 else ""

    def _get_days_in_month(self, year, month):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ"""
        if month == 12:
            next_month = datetime(year + 1, 1, 1)
        else:
            next_month = datetime(year, month + 1, 1)

        last_day = next_month - timedelta(days=1)
        return last_day.day

    def _prev_month(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É."""
        if self.current_date.month == 1:
            self.current_date = self.current_date.replace(year=self.current_date.year - 1, month=12)
        else:
            self.current_date = self.current_date.replace(month=self.current_date.month - 1)
        self.selected_day = 0
        self._update_calendar()

    def _next_month(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É."""
        if self.current_date.month == 12:
            self.current_date = self.current_date.replace(year=self.current_date.year + 1, month=1)
        else:
            self.current_date = self.current_date.replace(month=self.current_date.month + 1)
        self.selected_day = 0
        self._update_calendar()

    def _go_to_today(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é."""
        self.current_date = datetime.now()
        self.selected_day = self.current_date.day
        self._update_calendar()
================================================================================
        üìÑ main_screen.py

================================================================================
–§–ê–ô–õ: ui/screens/main_screen.py
================================================================================
from kivy.uix.screenmanager import Screen
from kivy.lang import Builder
from kivy.properties import ObjectProperty
from kivy.clock import Clock
from kivy.metrics import dp
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º KV-—Ñ–∞–π–ª—ã
kv_path = os.path.join(os.path.dirname(__file__), '..', 'kv', 'main_screen.kv')
Builder.load_file(kv_path)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞—á–∏
from ui.widgets.task_card import TaskCard


class MainScreen(Screen):
    """–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ"""

    tasks_container = ObjectProperty(None)

    def __init__(self, task_service=None, **kwargs):
        super().__init__(**kwargs)
        self.task_service = task_service
        Clock.schedule_once(self._load_tasks, 0.1)

    def _load_tasks(self, dt=None):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        if self.task_service and self.tasks_container:
            self._update_tasks_display()

    def _update_tasks_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á"""
        if not self.tasks_container:
            return

        self.tasks_container.clear_widgets()

        try:
            today_tasks = self.task_service.get_today_tasks()

            if not today_tasks:
                self._show_empty_state()
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
            from kivy.uix.widget import Widget
            self.tasks_container.add_widget(Widget(size_hint_y=None, height=dp(8)))

            for task in today_tasks:
                task_widget = TaskCard(task, self._complete_task)
                self.tasks_container.add_widget(task_widget)

                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
                separator = Widget(size_hint_y=None, height=dp(8))
                self.tasks_container.add_widget(separator)

            print(f"MainScreen: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ {len(today_tasks)} –∑–∞–¥–∞—á")

        except Exception as e:
            print(f"MainScreen: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: {e}")
            import traceback
            traceback.print_exc()

    def _show_empty_state(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–∞—á"""
        from kivy.uix.boxlayout import BoxLayout
        from kivy.uix.label import Label

        empty_container = BoxLayout(
            orientation='vertical',
            size_hint_y=None,
            height=dp(180),
            padding=dp(40),
            spacing=dp(16)
        )

        empty_label = Label(
            text="[color=cccccc]‚úì[/color]\n[b]–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã![/b]\n\n–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
            font_size='16sp',
            color=(0.6, 0.6, 0.6, 1),
            halign='center',
            valign='middle',
            text_size=(None, None),
            markup=True
        )

        empty_container.add_widget(empty_label)
        self.tasks_container.add_widget(empty_container)
        print("MainScreen: –ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")

    def _complete_task(self, task_id):
        """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        try:
            self.task_service.complete_task(task_id)
            # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É - –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –∞–Ω–∏–º–∞—Ü–∏—é
            Clock.schedule_once(lambda dt: self._update_tasks_display(), 0.3)
            print(f"–ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")

    def on_enter(self, *args):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        Clock.schedule_once(self._load_tasks, 0.1)

    def _go_to_task_editor(self, instance=None):
        self.manager.current = 'task_editor'

    def _go_to_calendar(self, instance=None):
        self.manager.current = 'calendar'

    def _go_to_statistics(self, instance=None):
        self.manager.current = 'statistics'
================================================================================
        üìÑ statistics_screen.py

================================================================================
–§–ê–ô–õ: ui/screens/statistics_screen.py
================================================================================
from kivy.uix.screenmanager import Screen
from kivy.lang import Builder
from kivy.properties import NumericProperty, ListProperty
from datetime import datetime, timedelta
import os

kv_path = os.path.join(os.path.dirname(__file__), '..', 'kv', 'statistics_screen.kv')
Builder.load_file(kv_path)


class StatisticsScreen(Screen):
    """–≠–∫—Ä–∞–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""

    completed_tasks = NumericProperty(0)
    productivity_percent = NumericProperty(0)
    chart_data = ListProperty([])

    def __init__(self, task_service=None, **kwargs):
        super().__init__(**kwargs)
        self.task_service = task_service

    def on_enter(self, *args):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        self._update_statistics()

    def _update_statistics(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        if not self.task_service:
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            all_tasks = self.task_service.get_all_tasks()

            # –°—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            completed_tasks = [task for task in all_tasks if task.status.value == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"]
            self.completed_tasks = len(completed_tasks)

            # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ç –≤—Å–µ—Ö –∑–∞–¥–∞—á)
            total_tasks = len(all_tasks)
            if total_tasks > 0:
                self.productivity_percent = int((self.completed_tasks / total_tasks) * 100)
            else:
                self.productivity_percent = 0

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def _go_to_main(self):
        self.manager.current = 'main'
================================================================================
        üìÑ task_editor.py

================================================================================
–§–ê–ô–õ: ui/screens/task_editor.py
================================================================================
from kivy.uix.screenmanager import Screen
from kivy.lang import Builder
from kivy.properties import StringProperty
from kivy.clock import Clock
from datetime import datetime, timedelta
from core.models import Priority
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º KV-—Ñ–∞–π–ª
kv_path = os.path.join(os.path.dirname(__file__), '..', 'kv', 'task_editor.kv')
Builder.load_file(kv_path)


class TaskEditorScreen(Screen):
    """–≠–∫—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á."""

    def __init__(self, task_service=None, **kwargs):
        super().__init__(**kwargs)
        self.task_service = task_service
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.selected_date = datetime.now() + timedelta(days=1)
        self.selected_time = (12, 0)  # (—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã)
        self.reminder_time = None
        Clock.schedule_once(self._setup_initial_state, 0.1)

    def _setup_initial_state(self, dt):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã"""
        if hasattr(self, 'ids') and 'medium_priority' in self.ids:
            self.ids.medium_priority.state = 'down'
        self._update_datetime_display()

    def on_enter(self, *args):
        """–û—á–∏—â–∞–µ—Ç —Ñ–æ—Ä–º—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        self.clear_form()

    def _go_to_main(self):
        """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω."""
        self.manager.current = 'main'

    def on_priority_change(self, button):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞."""
        if button.state == 'down':
            print(f"–í—ã–±—Ä–∞–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {button.text}")

    def _save_task(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            title = self.ids.task_title.text.strip()
            description = self.ids.task_description.text.strip()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not title:
                self._show_error("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∫–Ω–æ–ø–æ–∫
            if self.ids.high_priority.state == 'down':
                selected_priority_text = "–í–´–°–û–ö–ò–ô"
                priority = Priority.HIGH
            elif self.ids.medium_priority.state == 'down':
                selected_priority_text = "–°–†–ï–î–ù–ò–ô"
                priority = Priority.MEDIUM
            elif self.ids.low_priority.state == 'down':
                selected_priority_text = "–ù–ò–ó–ö–ò–ô"
                priority = Priority.LOW
            else:
                selected_priority_text = "–°–†–ï–î–ù–ò–ô"
                priority = Priority.MEDIUM

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç datetime –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
            due_date = self.selected_date.replace(
                hour=self.selected_time[0],
                minute=self.selected_time[1],
                second=0,
                microsecond=0
            )

            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {title}")
            print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
            print(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {selected_priority_text}")
            print(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {due_date}")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task = self.task_service.create_task(
                title=title,
                description=description,
                priority=priority,
                due_date=due_date,
                reminder_time=self.reminder_time
            )

            print(f"–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {task.title}")
            self._go_to_main()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            import traceback
            traceback.print_exc()
            self._show_error(f"–û—à–∏–±–∫–∞: {str(e)}")

    def _show_error(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        from kivy.uix.popup import Popup
        from kivy.uix.label import Label
        from kivy.uix.button import Button
        from kivy.uix.boxlayout import BoxLayout

        content = BoxLayout(orientation='vertical', padding=10, spacing=10)
        content.add_widget(Label(text=message))

        btn = Button(text='OK', size_hint_y=0.4)
        popup = Popup(title='–û—à–∏–±–∫–∞', content=content, size_hint=(0.7, 0.3))
        btn.bind(on_press=popup.dismiss)
        content.add_widget(btn)

        popup.open()

    def _select_date(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        from kivy.uix.popup import Popup
        from kivy.uix.boxlayout import BoxLayout
        from kivy.uix.gridlayout import GridLayout
        from kivy.uix.label import Label
        from kivy.uix.button import Button
        from kivy.metrics import dp
        from datetime import datetime, timedelta

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ø–∞–ø–∞
        content = BoxLayout(orientation='vertical', spacing=dp(10), padding=dp(15))

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = Label(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
            font_size='18sp',
            bold=True,
            size_hint_y=0.2
        )
        content.add_widget(title_label)

        # –°–µ—Ç–∫–∞ –¥–ª—è –¥–Ω–µ–π
        days_grid = GridLayout(cols=7, spacing=dp(2), size_hint_y=0.7)

        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        days_of_week = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        for day in days_of_week:
            day_label = Label(
                text=day,
                font_size='14sp',
                bold=True,
                color=(0.4, 0.4, 0.4, 1)
            )
            days_grid.add_widget(day_label)

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        today = datetime.now()
        first_day = today.replace(day=1)
        days_in_month = (first_day.replace(month=first_day.month % 12 + 1, day=1) - timedelta(days=1)).day

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏
        for day in range(1, days_in_month + 1):
            day_btn = Button(
                text=str(day),
                font_size='14sp',
                background_color=(0.95, 0.95, 0.95, 1),
                background_normal=''
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º
            if day == self.selected_date.day and today.month == self.selected_date.month:
                day_btn.background_color = (0.2, 0.6, 1, 1)
                day_btn.color = (1, 1, 1, 1)

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            day_btn.bind(on_press=lambda instance, d=day: self._on_date_selected(d, today.month, today.year))
            days_grid.add_widget(day_btn)

        content.add_widget(days_grid)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = BoxLayout(spacing=dp(10), size_hint_y=0.1)

        cancel_btn = Button(
            text='–û—Ç–º–µ–Ω–∞',
            background_color=(0.8, 0.8, 0.8, 1)
        )

        ok_btn = Button(
            text='OK',
            background_color=(0.2, 0.6, 1, 1)
        )

        cancel_btn.bind(on_press=lambda x: date_popup.dismiss())
        ok_btn.bind(on_press=lambda x: date_popup.dismiss())

        buttons_layout.add_widget(cancel_btn)
        buttons_layout.add_widget(ok_btn)
        content.add_widget(buttons_layout)

        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
        date_popup = Popup(
            title='',
            content=content,
            size_hint=(0.8, 0.7),
            auto_dismiss=False
        )

        date_popup.open()

    def _on_date_selected(self, day, month, year):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã"""
        self.selected_date = datetime(year, month, day)
        self._update_datetime_display()
        print(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {self.selected_date.strftime('%d.%m.%Y')}")

    def _select_time(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        from kivy.uix.popup import Popup
        from kivy.uix.boxlayout import BoxLayout
        from kivy.uix.gridlayout import GridLayout
        from kivy.uix.label import Label
        from kivy.uix.button import Button
        from kivy.metrics import dp

        content = BoxLayout(orientation='vertical', spacing=dp(10), padding=dp(15))

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = Label(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è",
            font_size='18sp',
            bold=True,
            size_hint_y=0.2
        )
        content.add_widget(title_label)

        # –°–µ—Ç–∫–∞ –¥–ª—è —á–∞—Å–æ–≤
        hours_grid = GridLayout(cols=6, spacing=dp(5), size_hint_y=0.4)
        hours_label = Label(text="–ß–∞—Å—ã:", size_hint_y=0.1)
        content.add_widget(hours_label)
        content.add_widget(hours_grid)

        for hour in range(0, 24):
            hour_btn = Button(
                text=str(hour).zfill(2),
                font_size='14sp',
                background_color=(0.95, 0.95, 0.95, 1),
                background_normal=''
            )

            if hour == self.selected_time[0]:
                hour_btn.background_color = (0.2, 0.6, 1, 1)
                hour_btn.color = (1, 1, 1, 1)

            hour_btn.bind(on_press=lambda instance, h=hour: self._on_hour_selected(h))
            hours_grid.add_widget(hour_btn)

        # –°–µ—Ç–∫–∞ –¥–ª—è –º–∏–Ω—É—Ç
        minutes_grid = GridLayout(cols=6, spacing=dp(5), size_hint_y=0.4)
        minutes_label = Label(text="–ú–∏–Ω—É—Ç—ã:", size_hint_y=0.1)
        content.add_widget(minutes_label)
        content.add_widget(minutes_grid)

        for minute in range(0, 60, 5):  # –° —à–∞–≥–æ–º 5 –º–∏–Ω—É—Ç
            minute_btn = Button(
                text=str(minute).zfill(2),
                font_size='14sp',
                background_color=(0.95, 0.95, 0.95, 1),
                background_normal=''
            )

            if minute == self.selected_time[1]:
                minute_btn.background_color = (0.2, 0.6, 1, 1)
                minute_btn.color = (1, 1, 1, 1)

            minute_btn.bind(on_press=lambda instance, m=minute: self._on_minute_selected(m))
            minutes_grid.add_widget(minute_btn)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = BoxLayout(spacing=dp(10), size_hint_y=0.1)

        cancel_btn = Button(
            text='–û—Ç–º–µ–Ω–∞',
            background_color=(0.8, 0.8, 0.8, 1)
        )

        ok_btn = Button(
            text='OK',
            background_color=(0.2, 0.6, 1, 1)
        )

        cancel_btn.bind(on_press=lambda x: time_popup.dismiss())
        ok_btn.bind(on_press=lambda x: time_popup.dismiss())

        buttons_layout.add_widget(cancel_btn)
        buttons_layout.add_widget(ok_btn)
        content.add_widget(buttons_layout)

        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
        time_popup = Popup(
            title='',
            content=content,
            size_hint=(0.8, 0.8),
            auto_dismiss=False
        )

        time_popup.open()

    def _on_hour_selected(self, hour):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Å–∞"""
        self.selected_time = (hour, self.selected_time[1])
        self._update_datetime_display()

    def _on_minute_selected(self, minute):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∏–Ω—É—Ç"""
        self.selected_time = (self.selected_time[0], minute)
        self._update_datetime_display()

    def _update_datetime_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö"""
        if hasattr(self, 'ids'):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            from utils.date_utils import format_date_display
            date_text = format_date_display(self.selected_date)
            time_text = f"{self.selected_time[0]:02d}:{self.selected_time[1]:02d}"

            if 'date_button' in self.ids:
                self.ids.date_button.text = f"{date_text}, {time_text}"

    def _set_reminder(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
        due_datetime = self.selected_date.replace(
            hour=self.selected_time[0],
            minute=self.selected_time[1]
        )
        self.reminder_time = due_datetime - timedelta(minutes=30)
        self._show_reminder_set()

    def _show_reminder_set(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        from kivy.uix.popup import Popup
        from kivy.uix.label import Label
        from kivy.uix.button import Button
        from kivy.uix.boxlayout import BoxLayout

        content = BoxLayout(orientation='vertical', padding=10, spacing=10)
        reminder_str = self.reminder_time.strftime('%d.%m.%Y %H:%M') if self.reminder_time else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        content.add_widget(Label(text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_str}"))

        btn = Button(text='OK', size_hint_y=0.4)
        popup = Popup(title='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', content=content, size_hint=(0.7, 0.3))
        btn.bind(on_press=popup.dismiss)
        content.add_widget(btn)

        popup.open()

    def clear_form(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏."""
        if hasattr(self, 'ids'):
            self.ids.task_title.text = ""
            self.ids.task_description.text = ""
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ —Å—Ä–µ–¥–Ω–∏–π
            if 'medium_priority' in self.ids:
                self.ids.medium_priority.state = 'down'

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞—Ç—ã
            self.selected_date = datetime.now() + timedelta(days=1)
            self.selected_time = (12, 0)
            self.reminder_time = None
            self._update_datetime_display()
================================================================================
    üìÅ widgets/
        üìÑ .DS_Store

================================================================================
–§–ê–ô–õ: ui/widgets/.DS_Store (–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
================================================================================
        üìÑ __init__.py

================================================================================
–§–ê–ô–õ: ui/widgets/__init__.py
================================================================================

================================================================================
        üìÑ calendar_widget.py

================================================================================
–§–ê–ô–õ: ui/widgets/calendar_widget.py
================================================================================

================================================================================
        üìÑ priority_picker.py

================================================================================
–§–ê–ô–õ: ui/widgets/priority_picker.py
================================================================================

================================================================================
        üìÑ task_card.py

================================================================================
–§–ê–ô–õ: ui/widgets/task_card.py
================================================================================
from kivy.uix.boxlayout import BoxLayout
from kivy.properties import StringProperty, ListProperty, BooleanProperty
from kivy.metrics import dp
from kivy.lang import Builder
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º KV-—Ñ–∞–π–ª –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏
kv_path = os.path.join(os.path.dirname(__file__), '..', 'kv', 'task_card.kv')
if os.path.exists(kv_path):
    Builder.load_file(kv_path)


class TaskCard(BoxLayout):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∏–ª–µ Todoist/Notion"""

    title = StringProperty("")
    description = StringProperty("")
    date_text = StringProperty("")
    time_text = StringProperty("")
    priority = StringProperty("–°—Ä–µ–¥–Ω–∏–π")
    priority_color = ListProperty([0.5, 0.5, 0.5, 1])
    is_completed = BooleanProperty(False)

    def __init__(self, task, on_complete_callback, **kwargs):
        super().__init__(**kwargs)
        self.task = task
        self.on_complete_callback = on_complete_callback

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
        self.title = task.title
        self.description = task.description if task.description else ""
        self.is_completed = task.status.value == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"

        from utils.date_utils import format_date_display, format_time_display
        self.date_text = format_date_display(task.due_date)
        self.time_text = format_time_display(task.due_date)
        self.priority = task.priority.value

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        self._set_priority_colors()

    def _set_priority_colors(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        priority_styles = {
            "–í—ã—Å–æ–∫–∏–π": [0.88, 0.24, 0.19, 1],  # –ö—Ä–∞—Å–Ω—ã–π –∫–∞–∫ –≤ Todoist
            "–°—Ä–µ–¥–Ω–∏–π": [1.0, 0.62, 0.11, 1],  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            "–ù–∏–∑–∫–∏–π": [0.16, 0.63, 0.33, 1]  # –ó–µ–ª–µ–Ω—ã–π
        }

        self.priority_color = priority_styles.get(self.priority, [0.44, 0.44, 0.44, 1])

    def toggle_completion(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        if not self.is_completed and self.on_complete_callback:
            self.on_complete_callback(self.task.id)
================================================================================
        üìÑ task_item.py

================================================================================
–§–ê–ô–õ: ui/widgets/task_item.py
================================================================================

================================================================================
üìÅ utils/
    üìÑ .DS_Store

================================================================================
–§–ê–ô–õ: utils/.DS_Store (–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
================================================================================
    üìÑ __init__.py

================================================================================
–§–ê–ô–õ: utils/__init__.py
================================================================================

================================================================================
    üìÑ config.py

================================================================================
–§–ê–ô–õ: utils/config.py
================================================================================
import os

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = os.path.join(os.path.expanduser("~"), ".smart_planner")
TASKS_FILE = os.path.join(DATA_DIR, "tasks.json")
STATISTICS_FILE = os.path.join(DATA_DIR, "statistics.json")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
REMINDER_BEFORE_MINUTES = 30

# –¶–≤–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
PRIORITY_COLORS = {
    "–í—ã—Å–æ–∫–∏–π": (0.8, 0.2, 0.2, 1),
    "–°—Ä–µ–¥–Ω–∏–π": (0.9, 0.6, 0.1, 1), 
    "–ù–∏–∑–∫–∏–π": (0.2, 0.6, 0.2, 1)
}

def ensure_data_dir():
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)
================================================================================
    üìÑ date_utils.py

================================================================================
–§–ê–ô–õ: utils/date_utils.py
================================================================================
from datetime import datetime, timedelta


def format_date_display(date: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ"""
    if not isinstance(date, datetime):
        return ""

    today = datetime.now().date()
    target_date = date.date()

    if target_date == today:
        return "–°–µ–≥–æ–¥–Ω—è"
    elif target_date == today + timedelta(days=1):
        return "–ó–∞–≤—Ç—Ä–∞"
    elif target_date == today - timedelta(days=1):
        return "–í—á–µ—Ä–∞"
    else:
        # –ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: "30 –æ–∫—Ç"
        month_names = ["—è–Ω–≤", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞–π", "–∏—é–Ω",
                       "–∏—é–ª", "–∞–≤–≥", "—Å–µ–Ω", "–æ–∫—Ç", "–Ω–æ—è", "–¥–µ–∫"]
        return f"{date.day} {month_names[date.month - 1]}"


def format_time_display(date: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not isinstance(date, datetime):
        return ""
    return date.strftime("%H:%M")


def is_date_in_future(date: datetime) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º"""
    return date > datetime.now()
================================================================================
    üìÑ notification_utils.py

================================================================================
–§–ê–ô–õ: utils/notification_utils.py
================================================================================

================================================================================
